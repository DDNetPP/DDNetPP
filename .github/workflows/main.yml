name: Build

on: [push, pull_request]

jobs:
  build-cmake:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        # os: [ubuntu-latest, macOS-latest, windows-latest, ubuntu-16.04]
        include:
        - os: ubuntu-latest
          cmake-args: -G "Unix Makefiles" -DCLIENT=OFF
          build-args: --parallel
          package-file: DDNetPP-*-linux_x86_64.tar.xz
          env:
            CFLAGS: -Wdeclaration-after-statement
        - os: ubuntu-22.04
          cmake-path: /usr/bin/
          cmake-args: -G "Unix Makefiles" -DCLIENT=OFF
          package-file: DDNetPP-*-linux_x86_64.tar.xz
          env:
            CFLAGS: -Wdeclaration-after-statement
        # - os: macOS-latest
        #   cmake-args: -G "Unix Makefiles"
        #   build-args: --parallel
        #   package-file: DDNetPP-*-osx.dmg
        #   env:
        #     CFLAGS: -Wdeclaration-after-statement
        # - os: windows-latest
        #   cmake-args: -G "Visual Studio 16 2019" -A x64
        #   package-file: DDNetPP-*-win64.zip
        #   env:
        #     CFLAGS: /WX
        #     CXXFLAGS: /WX
        #     LDFLAGS: /WX

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true

    - name: Prepare Linux
      if: contains(matrix.os, 'ubuntu')
      run: |
        sudo apt-get update -y
        sudo apt-get install pkg-config cmake ninja-build libfreetype6-dev libnotify-dev libsdl2-dev libsqlite3-dev libvulkan-dev glslang-tools spirv-tools libavcodec-dev libavformat-dev libavutil-dev libswresample-dev libswscale-dev libx264-dev libpng-dev valgrind gcovr libglew-dev -y

    # - name: Prepare MacOS
    #   if: contains(matrix.os, 'macOS')
    #   run: |
    #     brew update
    #     brew install pkg-config sdl2

    - name: Build in debug mode
      run: |
        mkdir debug
        cd debug
        ${{ matrix.cmake-path }}cmake --version
        ${{ matrix.cmake-path }}cmake ${{ matrix.cmake-args }} -DCMAKE_BUILD_TYPE=Debug -DDOWNLOAD_GTEST=ON -DDEV=ON -DCMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG=. ..
        ${{ matrix.cmake-path }}cmake --build . --config Debug ${{ matrix.build-args }} --target everything
    - name: Test debug
      run: |
        cd debug
        ./DDNetPP "sv_map ddnetpp-test;shutdown"

    - name: Build in release mode
      run: |
        mkdir release
        cd release
        ${{ matrix.cmake-path }}cmake ${{ matrix.cmake-args }} -DCMAKE_BUILD_TYPE=Release -DDOWNLOAD_GTEST=ON -DCMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE=. ..
        ${{ matrix.cmake-path }}cmake --build . --config Release ${{ matrix.build-args }} --target everything
    - name: Test release
      run: |
        cd release
        ./DDNetPP "sv_map ddnetpp-test;shutdown"

    - name: Package
      run: |
        cd release
        ${{ matrix.cmake-path }}cmake --build . --config Release --target package_default ${{ matrix.build-args }}
        mkdir artifacts
        mv ${{ matrix.package-file }} artifacts

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: DDNetPP-${{ matrix.os }}
        path: release/artifacts

  # build-bam:
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     matrix:
  #       os: [ubuntu-latest, macOS-latest]
  #       # os: [ubuntu-latest, macOS-latest, windows-latest]

  #   steps:
  #   - uses: actions/checkout@v2
  #     with:
  #       submodules: true

  #   - name: Checkout bam
  #     uses: actions/checkout@v2
  #     with:
  #       repository: matricks/bam
  #       ref: 07fbb5543c692f6b9a7f09e48c64e2368349a3a8
  #       path: ./bam

  #   - name: Prepare Linux
  #     if: contains(matrix.os, 'ubuntu')
  #     run: |
  #       sudo apt-get update -y
  #       sudo apt-get install pkg-config libfreetype6-dev libsdl2-dev libcurl4-openssl-dev libssl-dev -y
  #       cd bam
  #       ./make_unix.sh

  #   - name: Prepare MacOS
  #     if: contains(matrix.os, 'macOS')
  #     run: |
  #       brew update
  #       brew install sdl2
  #       cd bam
  #       ./make_unix.sh

  #   # - name: Prepare Windows
  #   #   if: contains(matrix.os, 'windows')
  #   #   run: |
  #   #     cd bam
  #   #     ./make_win64_msvc.bat

  #   - name: Build in debug mode
  #     if: contains(matrix.os, 'ubuntu')
  #     run: ./bam/bam server_debug
  #   - name: Test debug
  #     if: contains(matrix.os, 'ubuntu')
  #     run: ./DDNetPP_d shutdown

  #   - name: Build in release mode
  #     if: contains(matrix.os, 'ubuntu')
  #     run: ./bam/bam server_release
  #   - name: Test release
  #     if: contains(matrix.os, 'ubuntu')
  #     run: ./DDNetPP shutdown

  #   # - name: Build in debug mode
  #   #   run: ./bam/bam server_debug
  #   # - name: Test debug
  #   #   if: contains(matrix.os, 'ubuntu')
  #   #   run: ./DDNetPP_d shutdown
  #   # - name: Test debug
  #   #   if: contains(matrix.os, 'macOS')
  #   #   run: ./DDNetPP_x86_d shutdown

  #   # - name: Build in release mode
  #   #   run: ./bam/bam server_release
  #   # - name: Test release
  #   #   if: contains(matrix.os, 'ubuntu')
  #   #   run: ./DDNetPP shutdown
  #   # - name: Test release
  #   #   if: contains(matrix.os, 'macOS')
  #   #   run: ./DDNetPP_x86 shutdown

  #   # - name: Create MacOS app using make_release.py
  #   #   if: contains(matrix.os, 'macOS')
  #   #   run: |
  #   #     sudo python3 scripts/make_release.py 0.7.4 osx
