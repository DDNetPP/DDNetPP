name: Build

on:
  push:
    branches-ignore:
      - gh-readonly-queue/**
  pull_request:
  merge_group:

jobs:
  build-cmake:
    runs-on: ${{ matrix.os }}
    env:
      CARGO_HTTP_MULTIPLEXING: false
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
        include:
        - os: ubuntu-latest
          cmake-args: -G Ninja
          cmake-init-env: CXXFLAGS=-Werror
          package-file: "*-linux_x86_64.tar.xz"
          fancy: true
        - os: macOS-latest
          cmake-args: -G Ninja
          cmake-init-env: CXXFLAGS=-Werror
          package-file: "*-macos.dmg"
          fancy: false
        - os: windows-latest
          cmake-args: -A x64 -DEXCEPTION_HANDLING=ON
          cmake-init-env: CXXFLAGS=/WX LDFLAGS=/WX
          package-file: "*-win64.zip"
          fancy: false

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true

    - name: Prepare Linux
      if: contains(matrix.os, 'ubuntu')
      run: |
        sudo apt-get update -y
        # mount: /var/lib/grub/esp: special device /dev/disk/by-id/scsi-... does not exist.
        # sudo apt-get upgrade -y
        sudo apt-get install pkg-config cmake ninja-build libfreetype6-dev libnotify-dev libsdl2-dev libsqlite3-dev libvulkan-dev glslang-tools spirv-tools libavcodec-dev libavformat-dev libavutil-dev libswresample-dev libswscale-dev libx264-dev libpng-dev valgrind gcovr libglew-dev -y

    - name: Prepare Linux (non-fancy)
      if: ${{ contains(matrix.os, 'ubuntu') && !matrix.fancy }}
      run: |
        # Our minimum supported Rust version (MSRV)
        rustup default 1.63.0
        sudo rm -rf /var/lib/mysql/ /var/run/mysqld
        sudo mkdir /var/lib/mysql/ /var/run/mysqld/
        sudo chown mysql:mysql /var/lib/mysql/ /var/run/mysqld/
        sudo mysqld --initialize-insecure --user=mysql --basedir=/usr --datadir=/var/lib/mysql/
        sudo /usr/bin/mysqld_safe --basedir=/usr --datadir='/var/lib/mysql/' &
        sleep 10
        sudo mysql <<EOF
        CREATE DATABASE ddnet;
        CREATE USER 'ddnet'@'localhost' IDENTIFIED BY 'thebestpassword';
        GRANT ALL PRIVILEGES ON ddnet.* TO 'ddnet'@'localhost';
        FLUSH PRIVILEGES;
        EOF

    - name: Prepare Linux (fancy)
      if: contains(matrix.os, 'ubuntu') && matrix.fancy
      run: |
        sudo apt-get install libmariadb-dev libwebsockets-dev mariadb-server -y
        sudo systemctl stop mysql
        sudo rm -rf /var/lib/mysql/
        sudo mysql_install_db --user=mysql --datadir=/var/lib/mysql/
        cd /usr; sudo mysqld_safe --datadir='/var/lib/mysql/' --no-watch
        sleep 10
        sudo mysql <<EOF
        CREATE DATABASE ddnet;
        CREATE USER 'ddnet'@'localhost' IDENTIFIED BY 'thebestpassword';
        GRANT ALL PRIVILEGES ON ddnet.* TO 'ddnet'@'localhost';
        FLUSH PRIVILEGES;
        EOF

    - name: Prepare macOS
      if: contains(matrix.os, 'macOS')
      run: |
        brew update || true
        brew install pkg-config sdl2 ffmpeg ninja molten-vk vulkan-headers glslang spirv-tools rust || true
        brew upgrade freetype
        pip3 install --break-system-packages dmgbuild
        echo /Library/Frameworks/Python.framework/Versions/3.12/bin >> $GITHUB_PATH
        sudo rm -rf /Library/Developer/CommandLineTools

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2

    - name: Build in debug mode
      run: |
        mkdir debug
        cd debug
        ${{ matrix.cmake-path }}cmake -E env ${{ matrix.cmake-init-env }} ${{ matrix.cmake-path }}cmake ${{ matrix.cmake-args }} -DCMAKE_BUILD_TYPE=Debug -Werror=dev -DDOWNLOAD_GTEST=ON -DDEV=ON -DCMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG=. ..
        ${{ matrix.cmake-path }}cmake --build . --config Debug --target everything ${{ matrix.build-args }} --parallel 1 -- -j 1

    - name: Test debug
      run: |
        cd debug
        ${{ matrix.cmake-path }}cmake -E env ${{ matrix.gtest-env }} ${{ matrix.cmake-path }}cmake --build . --config Debug --target run_tests ${{ matrix.build-args }}

    - name: Run debug server
      run: |
        cd debug
        ./DDNetPP "sv_map ddnetpp-test;shutdown"

    - name: Build in release mode
      run: |
        mkdir release
        cd release
        ${{ matrix.cmake-path }}cmake -E env ${{ matrix.cmake-init-env }} ${{ matrix.cmake-path }}cmake ${{ matrix.cmake-args }} -DCLIENT=ON -DCMAKE_BUILD_TYPE=Release -Werror=dev -DDOWNLOAD_GTEST=ON -DCMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE=. ..
        ${{ matrix.cmake-path }}cmake --build . --config Release --target everything ${{ matrix.build-args }}

    - name: Test release
      run: |
        cd release
        ${{ matrix.cmake-path }}cmake -E env ${{ matrix.gtest-env }} ${{ matrix.cmake-path }}cmake --build . --config Release --target run_tests ${{ matrix.build-args }}

    - name: Run release server
      run: |
        cd release
        ./DDNetPP "sv_map ddnetpp-test;shutdown"

    - name: Build headless client
      if: contains(matrix.os, 'ubuntu-latest')
      run: |
        mkdir headless
        cd headless
        ${{ matrix.cmake-path }}cmake --version
        ${{ matrix.cmake-path }}cmake -E env CXXFLAGS="--coverage -Werror" ${{ matrix.cmake-path }}cmake -E env LDFLAGS="--coverage -Werror" ${{ matrix.cmake-path }}cmake \
          ${{ matrix.cmake-args }} \
          -DCLIENT=ON \
          -DHEADLESS_CLIENT=ON \
          -DCMAKE_BUILD_TYPE=Debug \
          -Werror=dev \
          -DDOWNLOAD_GTEST=ON \
          -DDEV=ON \
          -DCMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG=. ..
        ${{ matrix.cmake-path }}cmake -E env RUSTFLAGS="-Clink-arg=--coverage" ${{ matrix.cmake-path }}cmake --build . --config Debug  ${{ matrix.build-args }}
        cp DDNetPP.exe DDNet-Server.exe || true
        cp data/maps/ddnetpp-test.map data/maps/'Sunny Side Up'.map
    - name: Rename binarys on linux
      if: contains(matrix.os, 'ubuntu')
      run: |
        cd headless
        cp DDNetPP DDNet-Server || true

    - name: Test headless client (unit tests)
      if: contains(matrix.os, 'ubuntu-latest')
      run: |
        cd headless
        ${{ matrix.cmake-path }}cmake -E env RUSTFLAGS="-Clink-arg=--coverage" RUSTDOCFLAGS="-Clink-arg=--coverage" ${{ matrix.cmake-path }}cmake --build . --config Debug --target run_tests ${{ matrix.build-args }}

    - name: Upload Codecov report (unit tests)
      if: contains(matrix.os, 'ubuntu-latest')
      uses: codecov/codecov-action@v4
      with:
        flags: unittests

    - name: Test headless client (start & connect)
      if: contains(matrix.os, 'ubuntu-latest')
      run: |
        cd headless
        # Remove old coverage data:
        find . -name '*.gcno' -o -name '*.gcda' -delete
        ./DDNet-Server "sv_map coverage" &
        ./DDNet "cl_download_skins 0;connect localhost:8303;quit"
        pkill -f DDNet-Server || true

